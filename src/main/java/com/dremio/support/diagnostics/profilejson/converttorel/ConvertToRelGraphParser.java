/**
 * Copyright 2022 Dremio
 *
 * <p>Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file
 * except in compliance with the License. You may obtain a copy of the License at
 *
 * <p>http://www.apache.org/licenses/LICENSE-2.0
 *
 * <p>Unless required by applicable law or agreed to in writing, software distributed under the
 * License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
 * express or implied. See the License for the specific language governing permissions and
 * limitations under the License.
 */
package com.dremio.support.diagnostics.profilejson.converttorel;

import com.dremio.support.diagnostics.shared.dto.profilejson.PlanPhases;
import com.dremio.support.diagnostics.shared.dto.profilejson.ProfileJSON;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.stream.Collectors;
import java.util.stream.IntStream;

public class ConvertToRelGraphParser {

  /**
   * parses the entire convert to rel text block and generates a tree of relationships between the
   * nodes
   *
   * @param profileJSON parsed profile.json
   * @return Represents the graph of generated by the Convert To Rel plan phase.
   */
  public ConvertToRelGraph parseConvertToRel(final ProfileJSON profileJSON) {
    if (profileJSON != null && profileJSON.getPlanPhases() != null) {
      final List<ConvertToRelNode> nodes = new ArrayList<>();
      for (final PlanPhases phase : profileJSON.getPlanPhases()) {
        // we are only interested in the Convert To Rel plan phase
        if ("Convert To Rel".equals(phase.getPhaseName())) {
          // oddly the \n is visible in the file so we need to escape the \ so we can grab the line
          // endings, also this results in an empty string which we should filter
          final List<String> tokens =
              Arrays.stream(phase.getPlan().split("\\n"))
                  .filter(x -> !x.isEmpty())
                  .collect(Collectors.toList());
          // for each line parse and add to the list of nodes found
          IntStream.range(0, tokens.size())
              .forEach(
                  index ->
                      nodes.add(
                          ConvertToRelParser.parseConvertToRelFormattedLine(
                              index, tokens.get(index))));
        }
      }
      return new ConvertToRelGraph(nodes);
    }
    return null;
  }
}
